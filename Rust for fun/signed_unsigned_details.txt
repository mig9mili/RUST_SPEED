`u32` in Rust is an unsigned 32-bit integer type. Let me break this down:

1. The "u" stands for "unsigned", meaning it can only store non-negative numbers (0 and positive numbers)
2. The "32" indicates it uses 32 bits of memory

Key characteristics of `u32`:
- Range: 0 to 4,294,967,295 (2^32 - 1)
- Cannot store negative numbers
- Takes up exactly 4 bytes of memory

Rust has several integer types:

Unsigned integers:
- `u8`: 0 to 255
- `u16`: 0 to 65,535
- `u32`: 0 to 4,294,967,295
- `u64`: 0 to 18,446,744,073,709,551,615
- `u128`: 0 to 2^128 - 1
- `usize`: depends on computer architecture (usually 64-bit on modern computers)

Signed integers (can store negative numbers):
- `i8`: -128 to 127
- `i16`: -32,768 to 32,767
- `i32`: -2,147,483,648 to 2,147,483,647
- `i64`: -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
- `i128`: -2^127 to 2^127 - 1
- `isize`: depends on computer architecture

You would choose `u32` when you:
- Know your numbers will always be positive
- Need to store numbers up to about 4 billion
- Want to be memory efficient (compared to `u64` or `u128`)

For example, `MAX_POINT` in your code uses `u32` because:
```rust
const MAX_POINT: u32 = 100_000;  // Clearly positive and well within u32 range
```

In Rust, there are two main floating-point types:

1. `f32` (32-bit float):
- Single precision
- ~7 decimal digits of precision
- Range: approximately -3.4 × 10³⁸ to +3.4 × 10³⁸

2. `f64` (64-bit float):
- Double precision (default type for floating-point numbers in Rust)
- ~15 decimal digits of precision
- Range: approximately -1.8 × 10³⁰⁸ to +1.8 × 10³⁰⁸

Here's how to use them:

```rust
fn main() {
    // f64 (default type)
    let x = 2.0; // Rust infers f64
    
    // explicit f32
    let y: f32 = 3.0;
    
    // Scientific notation
    let z = 2.0e5; // 200000.0
    
    // Arithmetic operations
    let sum = x + y as f64; // need to convert f32 to f64
    let product = x * y as f64;
    
    println!("x: {}, y: {}, z: {}", x, y, z);
    println!("sum: {}, product: {}", sum, product);
}
```

Important points about floating-point numbers in Rust:
- They can represent decimal fractions
- They follow IEEE-754 standard
- `f64` is the default because it offers a good balance of precision and performance
- Not all decimal numbers can be represented exactly (like 0.1 + 0.2 might not equal exactly 0.3)
- You can't use them as array indices or in `match` patterns
- They don't implement the `Eq` trait because of precision issues

When to use which:
- Use `f64` when you need more precision (financial calculations, scientific computing)
- Use `f32` when you need to save memory or work with graphics programming